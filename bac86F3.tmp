[gd_scene load_steps=10 format=3 uid="uid://c1q4ywyi2cblg"]

[ext_resource type="Script" path="res://Scripts/background.gd" id="1_qj51f"]
[ext_resource type="PackedScene" uid="uid://d03qy3jsrvvb0" path="res://background.tscn" id="2_6upbp"]
[ext_resource type="Material" uid="uid://dfrv2g6uokkkg" path="res://Assets/Materials/Backgrounds/sprite_waves.tres" id="2_uaehy"]
[ext_resource type="Material" uid="uid://bovrtvhdx6lx7" path="res://Assets/Materials/Transitions/transition_diamonds.tres" id="3_8rol6"]
[ext_resource type="Material" uid="uid://dxtqe0cx86n1x" path="res://Assets/Materials/Transitions/transition_vertical_lines.tres" id="3_hd475"]
[ext_resource type="Texture2D" uid="uid://4d2ctq5hvmtf" path="res://Assets/black.png" id="5_v0i43"]

[sub_resource type="Shader" id="Shader_hjvcv"]
code = "//MADE BY : @ahopness
//LICENSE : CC0
//COMATIBLE WITH : GLES2, GLES3, WEBGL

shader_type canvas_item;

uniform float sort :hint_range(0.0, 2.6)= 0.0;
uniform sampler2D SCREEN_TEXTURE: hint_screen_texture, filter_linear_mipmap;

void fragment(){
	vec2 uv = FRAGCOORD.xy / (1.0 / SCREEN_PIXEL_SIZE).xy;
	
	// Pseudo Pixel Sorting
	float sortThreshold = 1.0 - clamp(sort / 2.6, 0.0, 1.0);
	vec2 sortUv = vec2(uv.x, sortThreshold);
	
	// Curved melting transition
	vec2 transitionUV = uv;
	transitionUV.y += pow(sort, 2.0 + (sort * 2.0)) * uv.x * fract(sin(dot(vec2(transitionUV.x), vec2(12.9, 78.2)))* 437.5);
	COLOR = texture(SCREEN_TEXTURE, transitionUV);
	
	// Draw pixel sorting effect behind the melting transition
	if(transitionUV.y > 1.){
		COLOR = texture(SCREEN_TEXTURE, sortUv);
	}else{
		COLOR = texture(SCREEN_TEXTURE, uv);
	}
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_rgor2"]
shader = SubResource("Shader_hjvcv")
shader_parameter/sort = 0.0

[sub_resource type="SpriteFrames" id="SpriteFrames_lo6to"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": ExtResource("5_v0i43")
}],
"loop": true,
"name": &"default",
"speed": 5.0
}]

[node name="Node2D" type="Node2D"]
script = ExtResource("1_qj51f")
background_shaders = Array[ShaderMaterial]([ExtResource("2_uaehy"), ExtResource("2_uaehy")])
transition_shaders = Array[ShaderMaterial]([ExtResource("3_8rol6"), ExtResource("3_hd475")])
time_between_transitions = null
linear_parameter_bound = null

[node name="BgLayer1ColorRect" type="ColorRect" parent="."]
visible = false
offset_left = 1.0
offset_top = -15.0
offset_right = 1151.0
offset_bottom = 628.0

[node name="BgLayer2ColorRect" type="ColorRect" parent="."]
visible = false
offset_left = -11.0
offset_top = -4.0
offset_right = 1140.0
offset_bottom = 640.0

[node name="BgLayer1ASprite" parent="." instance=ExtResource("2_6upbp")]
position = Vector2(570, 335)
script = null

[node name="BgLayer2ASprite" parent="." instance=ExtResource("2_6upbp")]
visible = false
position = Vector2(574, 344)
script = null

[node name="TransitionRect" type="ColorRect" parent="."]
visible = false
material = SubResource("ShaderMaterial_rgor2")
offset_right = 1117.0
offset_bottom = 637.0

[node name="TransitionASprite" type="AnimatedSprite2D" parent="."]
material = ExtResource("3_hd475")
position = Vector2(583, 400)
scale = Vector2(0.639583, 0.653704)
sprite_frames = SubResource("SpriteFrames_lo6to")
